import { OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { FileQueueService } from 'src/file-queue.service';
import { IFile } from 'src/interfaces/file.interface';
export declare class MinioStorageService implements OnModuleInit {
    private configService;
    private fileQueueService;
    private eventEmitter;
    private minioClient;
    private bucket;
    private readonly errors;
    private gzip;
    private gunzip;
    private deflate;
    private inflate;
    constructor(configService: ConfigService, fileQueueService: FileQueueService, eventEmitter: EventEmitter2);
    private testConnection;
    private setupEventListeners;
    onModuleInit(): Promise<void>;
    isConnected(): boolean;
    private getFileExtension;
    private getDatePrefix;
    private generateFilePath;
    private parsePathMinio;
    private ensureBucketExists;
    private validateFileSize;
    private handleUpload;
    upload(data: IFile): Promise<string>;
    private validateImageFile;
    uploadAvatar(data: IFile): Promise<string>;
    uploadHandler(data: IFile): Promise<string>;
    getFileInfo(fullPath: string): Promise<any>;
    download(fullPath: string): Promise<NodeJS.ReadableStream>;
    getBuffer(fullPath: string): Promise<Buffer>;
    private compressBuffer;
    private decompressBuffer;
    uploadCompressed(data: IFile): Promise<string>;
    uploadDeflateCompressed(data: IFile): Promise<string>;
    downloadAndDecompress(fullPath: string): Promise<Buffer>;
    downloadAndInflate(fullPath: string): Promise<Buffer>;
    downloadCompressedStream(fullPath: string): Promise<NodeJS.ReadableStream>;
    private isCompressedFile;
    smartDownload(fullPath: string): Promise<Buffer>;
    uploadWithAutoCompression(data: IFile, compressionThreshold?: number): Promise<string>;
    generatePresignedUrl(objectName: string, method?: string, expiry?: number): Promise<string>;
}
